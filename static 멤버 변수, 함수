일반 멤버 변수

. 객체가 생성될 때마다 객체의 수만큼 생성된다.

. 일반 멤버 변수를 객체의 생성 없이 직접 접근할 수 없다.

. static 멤버 함수에서 접근할 수 없다.

. 일반 멤버 함수에서 접근할 수 있다.


일반 멤버 함수

. 객체가 생성되지 않아도 함수는 먼저 생성되어 있다. 그래서 언제든지 호출할 수도 있다. 단 객체가 생성되지

  않았을 때의 호출은 아직 "생성되지 않은 멤버 변수에 접근"할 수 있기 때문에 프로그램을 다운시킬 수 있다.

. 함수는 객체마다 하나씩 생성되는 것이 아니며, 오직 하나만 생성된다. 각 객체는 그 함수를 공유하여 사용하는

  것 뿐이다.

. 스레드에서 호출될 수 없다.

. static 멤버 함수를 호출할 수 있다.

. 상속할 수 있다.

. this 포인터의 사용이 가능하다.


static 멤버 변수

. 객체의 생성과 관계 없이 생성되며, 객체에서 사용하는 전역 변수다

. 반드시 int  T::count;와 같은 추가적인 선언이 필요하다. 그렇지 않은 경우 LINK 에러가 발생된다.

. private 영역에 선언되어 있으면, 멤버 함수에서만 접근 가능하고, public 영역에 선언되어 있으면,

  멤버 함수 및 다른 함수에서 직접 접근할 수 있다.

. 객체가 사용하는 전역 변수이기 때문에 오직 하나만 생성된다. 객체 변수들은 객체가 생성될 때마다

  만들어 진다.

. 일반 멤버 함수 및 static 멤버 함수에서 모두 접근 가능하다.


static 멤버 함수

. 일반 멤버 변수를 접근할 수 없다.

. 일반 멤버 함수를 호출할 수 없다.

. static 멤버 변수를 사용할 수 있다.

. 상속할 수 없다.

. 스레드에서 함수를 사용 가능하다.

. public 영역에 선언되는 경우 전역에서 사용 가능하다.

. this 포인터의 사용이 불가능하다. this 포인터는 객체가 생성되었을 때만 사용할 수 있기 때문이다.

  (객체가 없을 때 호출될 수 있는 static 멤버 함수가 객체 포인터(this)에 접근하는 것은 당연히 불가능)

. 객체의 생성 없이 그 클래스의 일부 기능을 함수를 통해 제공할 때 사용한다.

. 일반 멤버 함수는 스레드용 함수로 호출이 안되지만, static 멤버 함수는 스레드용 함수로 사용된다.



-------------------static 멤버변수----------------------------------
#include <stdio.h>

class T{
public:
    static int count;
    T() { printf( "count = %d \n", ++count ); }
};

int  T::count;      // 매우 중요

void main( void )
{
    T::count = 100;      // 객체가 생성되지 않아도 접근 가능

    T t1;
    T t2;
}



-------------------static 멤버함수----------------------------------
#include <stdio.h>

class T{
public:
    static int value;
    T() {}
    static void func() { printf( "%d", value ); }
};

int  T::value; 
 
void main( void ){
    func();        // 에러

    T::func();    // static 함수 호출 가능

    T t;

    t.func();      // 가능
}


출처: http://yhs1981.tistory.com/entry/C-클래스에서-사용되는-static-멤버-변수-및-함수 [개발자의꿈]
